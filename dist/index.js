// Generated by purs bundle 0.11.7
var PS = {};
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Semigroupoid = function (compose) {
      this.compose = compose;
  };
  var semigroupoidFn = new Semigroupoid(function (f) {
      return function (g) {
          return function (x) {
              return f(g(x));
          };
      };
  });
  var compose = function (dict) {
      return dict.compose;
  };
  exports["compose"] = compose;
  exports["Semigroupoid"] = Semigroupoid;
  exports["semigroupoidFn"] = semigroupoidFn;
})(PS["Control.Semigroupoid"] = PS["Control.Semigroupoid"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Semigroupoid = PS["Control.Semigroupoid"];        
  var Category = function (Semigroupoid0, id) {
      this.Semigroupoid0 = Semigroupoid0;
      this.id = id;
  };
  var id = function (dict) {
      return dict.id;
  };
  var categoryFn = new Category(function () {
      return Control_Semigroupoid.semigroupoidFn;
  }, function (x) {
      return x;
  });
  exports["Category"] = Category;
  exports["id"] = id;
  exports["categoryFn"] = categoryFn;
})(PS["Control.Category"] = PS["Control.Category"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Category = PS["Control.Category"];
  var $$const = function (a) {
      return function (v) {
          return a;
      };
  };
  exports["const"] = $$const;
})(PS["Data.Function"] = PS["Data.Function"] || {});
(function(exports) {
    "use strict";

  exports.unit = {};
})(PS["Data.Unit"] = PS["Data.Unit"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Data.Unit"];
  var Data_Show = PS["Data.Show"];
  exports["unit"] = $foreign.unit;
})(PS["Data.Unit"] = PS["Data.Unit"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Data.Functor"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Function = PS["Data.Function"];
  var Data_Unit = PS["Data.Unit"];        
  var Functor = function (map) {
      this.map = map;
  };
  var map = function (dict) {
      return dict.map;
  };
  var $$void = function (dictFunctor) {
      return map(dictFunctor)(Data_Function["const"](Data_Unit.unit));
  };
  exports["Functor"] = Functor;
  exports["map"] = map;
  exports["void"] = $$void;
})(PS["Data.Functor"] = PS["Data.Functor"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Control.Apply"];
  var Control_Category = PS["Control.Category"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];        
  var Apply = function (Functor0, apply) {
      this.Functor0 = Functor0;
      this.apply = apply;
  };                      
  var apply = function (dict) {
      return dict.apply;
  };
  exports["Apply"] = Apply;
  exports["apply"] = apply;
})(PS["Control.Apply"] = PS["Control.Apply"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Apply = PS["Control.Apply"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];        
  var Applicative = function (Apply0, pure) {
      this.Apply0 = Apply0;
      this.pure = pure;
  };
  var pure = function (dict) {
      return dict.pure;
  };
  var liftA1 = function (dictApplicative) {
      return function (f) {
          return function (a) {
              return Control_Apply.apply(dictApplicative.Apply0())(pure(dictApplicative)(f))(a);
          };
      };
  };
  exports["Applicative"] = Applicative;
  exports["pure"] = pure;
  exports["liftA1"] = liftA1;
})(PS["Control.Applicative"] = PS["Control.Applicative"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Control.Bind"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Category = PS["Control.Category"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];        
  var Bind = function (Apply0, bind) {
      this.Apply0 = Apply0;
      this.bind = bind;
  };                     
  var bind = function (dict) {
      return dict.bind;
  };
  exports["Bind"] = Bind;
  exports["bind"] = bind;
})(PS["Control.Bind"] = PS["Control.Bind"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];        
  var Monad = function (Applicative0, Bind1) {
      this.Applicative0 = Applicative0;
      this.Bind1 = Bind1;
  };
  var ap = function (dictMonad) {
      return function (f) {
          return function (a) {
              return Control_Bind.bind(dictMonad.Bind1())(f)(function (v) {
                  return Control_Bind.bind(dictMonad.Bind1())(a)(function (v1) {
                      return Control_Applicative.pure(dictMonad.Applicative0())(v(v1));
                  });
              });
          };
      };
  };
  exports["Monad"] = Monad;
  exports["ap"] = ap;
})(PS["Control.Monad"] = PS["Control.Monad"] || {});
(function(exports) {
    "use strict";

  exports.pureE = function (a) {
    return function () {
      return a;
    };
  };

  exports.bindE = function (a) {
    return function (f) {
      return function () {
        return f(a())();
      };
    };
  };

  exports.forE = function (lo) {
    return function (hi) {
      return function (f) {
        return function () {
          for (var i = lo; i < hi; i++) {
            f(i)();
          }
        };
      };
    };
  };
})(PS["Control.Monad.Eff"] = PS["Control.Monad.Eff"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Control.Monad.Eff"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Unit = PS["Data.Unit"];        
  var monadEff = new Control_Monad.Monad(function () {
      return applicativeEff;
  }, function () {
      return bindEff;
  });
  var bindEff = new Control_Bind.Bind(function () {
      return applyEff;
  }, $foreign.bindE);
  var applyEff = new Control_Apply.Apply(function () {
      return functorEff;
  }, Control_Monad.ap(monadEff));
  var applicativeEff = new Control_Applicative.Applicative(function () {
      return applyEff;
  }, $foreign.pureE);
  var functorEff = new Data_Functor.Functor(Control_Applicative.liftA1(applicativeEff));
  exports["functorEff"] = functorEff;
  exports["applyEff"] = applyEff;
  exports["applicativeEff"] = applicativeEff;
  exports["bindEff"] = bindEff;
  exports["monadEff"] = monadEff;
  exports["forE"] = $foreign.forE;
})(PS["Control.Monad.Eff"] = PS["Control.Monad.Eff"] || {});
(function(exports) {
    "use strict";

  exports.newRef = function (val) {
    return function () {
      return { value: val };
    };
  };

  exports.readRef = function (ref) {
    return function () {
      return ref.value;
    };
  };

  exports.writeRef = function (ref) {
    return function (val) {
      return function () {
        ref.value = val;
        return {};
      };
    };
  };
})(PS["Control.Monad.Eff.Ref"] = PS["Control.Monad.Eff.Ref"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Control.Monad.Eff.Ref"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];
  exports["newRef"] = $foreign.newRef;
  exports["readRef"] = $foreign.readRef;
  exports["writeRef"] = $foreign.writeRef;
})(PS["Control.Monad.Eff.Ref"] = PS["Control.Monad.Eff.Ref"] || {});
(function(exports) {
  /* global window */
  "use strict";

  exports.window = function () {
    return window;
  };
})(PS["DOM.HTML"] = PS["DOM.HTML"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["DOM.HTML"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var DOM = PS["DOM"];
  var DOM_HTML_Types = PS["DOM.HTML.Types"];
  exports["window"] = $foreign.window;
})(PS["DOM.HTML"] = PS["DOM.HTML"] || {});
(function(exports) {
    "use strict";

  exports._requestAnimationFrame = function(fn) {
    return function(window) {
      return function() {
        return window.requestAnimationFrame(fn);
      };
    };
  };
})(PS["DOM.HTML.Window"] = PS["DOM.HTML.Window"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Monad = PS["Control.Monad"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];        
  var Nothing = (function () {
      function Nothing() {

      };
      Nothing.value = new Nothing();
      return Nothing;
  })();
  var Just = (function () {
      function Just(value0) {
          this.value0 = value0;
      };
      Just.create = function (value0) {
          return new Just(value0);
      };
      return Just;
  })();
  var maybe = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Nothing) {
                  return v;
              };
              if (v2 instanceof Just) {
                  return v1(v2.value0);
              };
              throw new Error("Failed pattern match at Data.Maybe line 219, column 1 - line 219, column 51: " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  };
  var fromMaybe = function (a) {
      return maybe(a)(Control_Category.id(Control_Category.categoryFn));
  };
  exports["Nothing"] = Nothing;
  exports["Just"] = Just;
  exports["maybe"] = maybe;
  exports["fromMaybe"] = fromMaybe;
})(PS["Data.Maybe"] = PS["Data.Maybe"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["DOM.HTML.Window"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var DOM = PS["DOM"];
  var DOM_HTML_Types = PS["DOM.HTML.Types"];
  var DOM_WebStorage_Types = PS["DOM.WebStorage.Types"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Nullable = PS["Data.Nullable"];
  var Data_Ord = PS["Data.Ord"];
  var Prelude = PS["Prelude"];
  var RequestAnimationFrameId = function (x) {
      return x;
  };
  var requestAnimationFrame = function (fn) {
      return function ($31) {
          return Data_Functor.map(Control_Monad_Eff.functorEff)(RequestAnimationFrameId)($foreign._requestAnimationFrame(fn)($31));
      };
  };
  exports["requestAnimationFrame"] = requestAnimationFrame;
})(PS["DOM.HTML.Window"] = PS["DOM.HTML.Window"] || {});
(function(exports) {
    "use strict";

  //------------------------------------------------------------------------------
  // Array size ------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.length = function (xs) {
    return xs.length;
  };

  //------------------------------------------------------------------------------
  // Indexed operations ----------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.indexImpl = function (just) {
    return function (nothing) {
      return function (xs) {
        return function (i) {
          return i < 0 || i >= xs.length ? nothing :  just(xs[i]);
        };
      };
    };
  };
})(PS["Data.Array"] = PS["Data.Array"] || {});
(function(exports) {
    "use strict";

  exports.emptySTArray = function () {
    return [];
  };

  exports.peekSTArrayImpl = function (just) {
    return function (nothing) {
      return function (xs) {
        return function (i) {
          return function () {
            return i >= 0 && i < xs.length ? just(xs[i]) : nothing;
          };
        };
      };
    };
  };

  exports.pushAllSTArray = function (xs) {
    return function (as) {
      return function () {
        return xs.push.apply(xs, as);
      };
    };
  };
})(PS["Data.Array.ST"] = PS["Data.Array.ST"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Data.Array.ST"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_ST = PS["Control.Monad.ST"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Maybe = PS["Data.Maybe"];
  var Prelude = PS["Prelude"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];
  var pushSTArray = function (arr) {
      return function (a) {
          return $foreign.pushAllSTArray(arr)([ a ]);
      };
  };
  var peekSTArray = $foreign.peekSTArrayImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  exports["peekSTArray"] = peekSTArray;
  exports["pushSTArray"] = pushSTArray;
  exports["emptySTArray"] = $foreign.emptySTArray;
})(PS["Data.Array.ST"] = PS["Data.Array.ST"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Data.Array"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Control_Monad_ST = PS["Control.Monad.ST"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Array_ST = PS["Data.Array.ST"];
  var Data_Array_ST_Iterator = PS["Data.Array.ST.Iterator"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_NonEmpty = PS["Data.NonEmpty"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Prelude = PS["Prelude"];
  var index = $foreign.indexImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  exports["index"] = index;
})(PS["Data.Array"] = PS["Data.Array"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  exports.getCanvasElementByIdImpl = function(id, Just, Nothing) {
      return function() {
          var el = document.getElementById(id);
          if (el && el instanceof HTMLCanvasElement) {
              return Just(el);
          } else {
              return Nothing;
          }
      };
  };

  exports.getContext2D = function(c) {
      return function() {
          return c.getContext('2d');
      };
  };

  exports.getCanvasWidth = function(canvas) {
      return function() {
          return canvas.width;
      };
  };

  exports.getCanvasHeight = function(canvas) {
      return function() {
          return canvas.height;
      };
  };

  exports.setCanvasWidth = function(width) {
      return function(canvas) {
          return function() {
              canvas.width = width;
              return canvas;
          };
      };
  };

  exports.setCanvasHeight = function(height) {
      return function(canvas) {
          return function() {
              canvas.height = height;
              return canvas;
          };
      };
  };

  exports.setFillStyle = function(style) {
      return function(ctx) {
          return function() {
              ctx.fillStyle = style;
              return ctx;
          };
      };
  };

  exports.setStrokeStyle = function(style) {
      return function(ctx) {
          return function() {
              ctx.strokeStyle = style;
              return ctx;
          };
      };
  };

  exports.beginPath = function(ctx) {
      return function() {
          ctx.beginPath();
          return ctx;
      };
  };

  exports.stroke = function(ctx) {
      return function() {
          ctx.stroke();
          return ctx;
      };
  };

  exports.lineTo = function(ctx) {
      return function(x) {
          return function(y) {
              return function() {
                  ctx.lineTo(x, y);
                  return ctx;
              };
          };
      };
  };

  exports.moveTo = function(ctx) {
      return function(x) {
          return function(y) {
              return function() {
                  ctx.moveTo(x, y);
                  return ctx;
              };
          };
      };
  };

  exports.closePath = function(ctx) {
      return function() {
          ctx.closePath();
          return ctx;
      };
  };

  exports.translate = function(t) {
      return function(ctx) {
          return function() {
              ctx.translate(t.translateX, t.translateY);
              return ctx;
          };
      };
  };

  exports.clearRect = function(ctx) {
      return function(r) {
          return function() {
              ctx.clearRect(r.x, r.y, r.w, r.h);
              return ctx;
          };
      };
  };

  exports.save = function(ctx) {
      return function() {
          ctx.save();
          return ctx;
      };
  };

  exports.restore = function(ctx) {
      return function() {
          ctx.restore();
          return ctx;
      };
  };
})(PS["Graphics.Canvas"] = PS["Graphics.Canvas"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Graphics.Canvas"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Exception_Unsafe = PS["Control.Monad.Eff.Exception.Unsafe"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_ArrayBuffer_Types = PS["Data.ArrayBuffer.Types"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Function_Uncurried = PS["Data.Function.Uncurried"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Prelude = PS["Prelude"];
  var withContext = function (ctx) {
      return function (action) {
          return function __do() {
              var v = $foreign.save(ctx)();
              var v1 = action();
              var v2 = $foreign.restore(ctx)();
              return v1;
          };
      };
  };
  var getCanvasElementById = function (elId) {
      return $foreign.getCanvasElementByIdImpl(elId, Data_Maybe.Just.create, Data_Maybe.Nothing.value);
  };
  exports["getCanvasElementById"] = getCanvasElementById;
  exports["withContext"] = withContext;
  exports["getContext2D"] = $foreign.getContext2D;
  exports["getCanvasWidth"] = $foreign.getCanvasWidth;
  exports["setCanvasWidth"] = $foreign.setCanvasWidth;
  exports["getCanvasHeight"] = $foreign.getCanvasHeight;
  exports["setCanvasHeight"] = $foreign.setCanvasHeight;
  exports["setFillStyle"] = $foreign.setFillStyle;
  exports["setStrokeStyle"] = $foreign.setStrokeStyle;
  exports["beginPath"] = $foreign.beginPath;
  exports["stroke"] = $foreign.stroke;
  exports["lineTo"] = $foreign.lineTo;
  exports["moveTo"] = $foreign.moveTo;
  exports["closePath"] = $foreign.closePath;
  exports["clearRect"] = $foreign.clearRect;
  exports["translate"] = $foreign.translate;
})(PS["Graphics.Canvas"] = PS["Graphics.Canvas"] || {});
(function(exports) {
    "use strict";          

  exports.cos = Math.cos;    

  exports.sin = Math.sin;      

  exports.pi = Math.PI;
})(PS["Math"] = PS["Math"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Math"];
  exports["cos"] = $foreign.cos;
  exports["sin"] = $foreign.sin;
  exports["pi"] = $foreign.pi;
})(PS["Math"] = PS["Math"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Console = PS["Control.Monad.Eff.Console"];
  var Control_Monad_Eff_Ref = PS["Control.Monad.Eff.Ref"];
  var Control_Monad_ST = PS["Control.Monad.ST"];
  var DOM = PS["DOM"];
  var DOM_HTML = PS["DOM.HTML"];
  var DOM_HTML_Types = PS["DOM.HTML.Types"];
  var DOM_HTML_Window = PS["DOM.HTML.Window"];
  var Data_Array = PS["Data.Array"];
  var Data_Array_ST = PS["Data.Array.ST"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semiring = PS["Data.Semiring"];
  var FFI_Util = PS["FFI.Util"];
  var Graphics_Canvas = PS["Graphics.Canvas"];
  var $$Math = PS["Math"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Prelude = PS["Prelude"];        
  var rotate_z = function (nodes) {
      return function (angle) {
          var sint = $$Math.sin(angle);
          var cost = $$Math.cos(angle);
          return function __do() {
              var v = Data_Array_ST.emptySTArray();
              Data_Functor["void"](Control_Monad_Eff.functorEff)(Control_Monad_Eff.forE(0)(8)(function (i) {
                  return function __do() {
                      var v1 = Data_Array_ST.peekSTArray(nodes)(i)();
                      var node = Data_Maybe.fromMaybe([  ])(v1);
                      var jx = Data_Array.index(node)(0);
                      var jy = Data_Array.index(node)(1);
                      var jz = Data_Array.index(node)(2);
                      var x = Data_Maybe.fromMaybe(0.0)(jx);
                      var y = Data_Maybe.fromMaybe(0.0)(jy);
                      var z = Data_Maybe.fromMaybe(0.0)(jz);
                      var nx = x * cost - y * sint;
                      var ny = y * cost + x * sint;
                      var nn = [ nx, ny, z ];
                      return Data_Functor["void"](Control_Monad_Eff.functorEff)(Data_Array_ST.pushSTArray(v)(nn))();
                  };
              }))();
              return v;
          };
      };
  };
  var rotate_y = function (nodes) {
      return function (angle) {
          var sint = $$Math.sin(angle);
          var cost = $$Math.cos(angle);
          return function __do() {
              var v = Data_Array_ST.emptySTArray();
              Data_Functor["void"](Control_Monad_Eff.functorEff)(Control_Monad_Eff.forE(0)(8)(function (i) {
                  return function __do() {
                      var v1 = Data_Array_ST.peekSTArray(nodes)(i)();
                      var node = Data_Maybe.fromMaybe([  ])(v1);
                      var jx = Data_Array.index(node)(0);
                      var jy = Data_Array.index(node)(1);
                      var jz = Data_Array.index(node)(2);
                      var x = Data_Maybe.fromMaybe(0.0)(jx);
                      var y = Data_Maybe.fromMaybe(0.0)(jy);
                      var z = Data_Maybe.fromMaybe(0.0)(jz);
                      var nx = x * cost - z * sint;
                      var nz = z * cost + x * sint;
                      var nn = [ nx, y, nz ];
                      return Data_Functor["void"](Control_Monad_Eff.functorEff)(Data_Array_ST.pushSTArray(v)(nn))();
                  };
              }))();
              return v;
          };
      };
  };
  var rotate_x = function (nodes) {
      return function (angle) {
          var sint = $$Math.sin(angle);
          var cost = $$Math.cos(angle);
          return function __do() {
              var v = Data_Array_ST.emptySTArray();
              Data_Functor["void"](Control_Monad_Eff.functorEff)(Control_Monad_Eff.forE(0)(8)(function (i) {
                  return function __do() {
                      var v1 = Data_Array_ST.peekSTArray(nodes)(i)();
                      var node = Data_Maybe.fromMaybe([  ])(v1);
                      var jx = Data_Array.index(node)(0);
                      var jy = Data_Array.index(node)(1);
                      var jz = Data_Array.index(node)(2);
                      var x = Data_Maybe.fromMaybe(0.0)(jx);
                      var y = Data_Maybe.fromMaybe(0.0)(jy);
                      var z = Data_Maybe.fromMaybe(0.0)(jz);
                      var ny = y * cost - z * sint;
                      var nz = z * cost + y * sint;
                      var nn = [ x, ny, nz ];
                      return Data_Functor["void"](Control_Monad_Eff.functorEff)(Data_Array_ST.pushSTArray(v)(nn))();
                  };
              }))();
              return v;
          };
      };
  };
  var draw_line = function (mxv) {
      return function (myv) {
          return function (lxv) {
              return function (lyv) {
                  return function (context) {
                      return function __do() {
                          var v = Graphics_Canvas.moveTo(context)(mxv)(myv)();
                          return Data_Functor["void"](Control_Monad_Eff.functorEff)(Graphics_Canvas.lineTo(context)(lxv)(lyv))();
                      };
                  };
              };
          };
      };
  };
  var draw_faces = function (nodes) {
      return function (edges) {
          return function (context) {
              return Data_Functor["void"](Control_Monad_Eff.functorEff)(Graphics_Canvas.withContext(context)(function __do() {
                  var v = Graphics_Canvas.setStrokeStyle("#0000FF")(context)();
                  var v1 = Graphics_Canvas.beginPath(context)();
                  var v2 = Data_Array_ST.emptySTArray();
                  Data_Functor["void"](Control_Monad_Eff.functorEff)(Control_Monad_Eff.forE(0)(12)(function (i) {
                      return function __do() {
                          var v3 = Data_Array_ST.peekSTArray(edges)(i)();
                          var n = Data_Maybe.fromMaybe([  ])(v3);
                          var jnva = Data_Array.index(n)(0);
                          var nva = Data_Maybe.fromMaybe(0)(jnva);
                          var jnvb = Data_Array.index(n)(1);
                          var nvb = Data_Maybe.fromMaybe(0)(jnvb);
                          var v4 = Data_Array_ST.peekSTArray(nodes)(nva)();
                          var na = Data_Maybe.fromMaybe([  ])(v4);
                          var v5 = Data_Array_ST.peekSTArray(nodes)(nvb)();
                          var nb = Data_Maybe.fromMaybe([  ])(v5);
                          var jmxv = Data_Array.index(na)(0);
                          var mxv = Data_Maybe.fromMaybe(0.0)(jmxv);
                          var jmyv = Data_Array.index(na)(1);
                          var myv = Data_Maybe.fromMaybe(0.0)(jmyv);
                          var jlxv = Data_Array.index(nb)(0);
                          var lxv = Data_Maybe.fromMaybe(0.0)(jlxv);
                          var jlyv = Data_Array.index(nb)(1);
                          var lyv = Data_Maybe.fromMaybe(0.0)(jlyv);
                          return draw_line(mxv)(myv)(lxv)(lyv)(context)();
                      };
                  }))();
                  var v3 = Graphics_Canvas.closePath(context)();
                  return Graphics_Canvas.stroke(context)();
              }));
          };
      };
  };
  var rotate_cube = function (context) {
      return function (state) {
          return function __do() {
              var v = rotate_z(state.n)(state.x_theta)();
              var v1 = rotate_y(v)(state.y_theta)();
              var v2 = rotate_x(v1)(state.z_theta)();
              draw_faces(v2)(state.e)(context)();
              return v2;
          };
      };
  };
  var draw_cube = function (dictPartial) {
      return function (context) {
          return function (state) {
              return Data_Functor["void"](Control_Monad_Eff.functorEff)(function __do() {
                  var v = Graphics_Canvas.getCanvasElementById("canvas")();
                  var __unused = function (dictPartial1) {
                      return function ($dollar43) {
                          return $dollar43;
                      };
                  };
                  return __unused(dictPartial)((function () {
                      if (v instanceof Data_Maybe.Just) {
                          return function __do() {
                              var v1 = Graphics_Canvas.getCanvasWidth(v.value0)();
                              var v2 = Graphics_Canvas.getCanvasHeight(v.value0)();
                              var v3 = Graphics_Canvas.setFillStyle("#F8F9FA")(context)();
                              var v4 = rotate_cube(v3)(state)();
                              var v5 = rotate_cube(v3)(state)();
                              var v6 = rotate_cube(v3)(state)();
                              var v7 = rotate_cube(v3)(state)();
                              var v8 = Graphics_Canvas.clearRect(v3)({
                                  x: -200.0,
                                  y: -200.0,
                                  w: v1,
                                  h: v2
                              })();
                              return rotate_cube(v3)(state)();
                          };
                      };
                      throw new Error("Failed pattern match at Cube.Shape line 203, column 3 - line 204, column 3: " + [ v.constructor.name ]);
                  })())();
              });
          };
      };
  };
  var update_canvas = function (dictPartial) {
      return function (state) {
          return function (context) {
              return function __do() {
                  var v = Graphics_Canvas.clearRect(context)({
                      x: -200.0,
                      y: -200.0,
                      w: state.size,
                      h: state.size
                  })();
                  return draw_cube(dictPartial)(context)(state)();
              };
          };
      };
  };
  var animation = function (window) {
      return function (ref) {
          return function (state) {
              return function (step) {
                  return Data_Functor["void"](Control_Monad_Eff.functorEff)(DOM_HTML_Window.requestAnimationFrame(function __do() {
                      animation(window)(ref)(state)(step)();
                      var v = Control_Monad_Eff_Ref.readRef(ref)();
                      var v1 = step(v)();
                      return Control_Monad_Eff_Ref.writeRef(ref)(v1)();
                  })(window));
              };
          };
      };
  };
  var animate = function (dictPartial) {
      return function (state) {
          return function (update_canv) {
              return function __do() {
                  var v = DOM_HTML.window();
                  var v1 = Control_Monad_Eff_Ref.newRef(state)();
                  return animation(v)(v1)(state)(function (state1) {
                      return function __do() {
                          var v2 = Graphics_Canvas.getCanvasElementById("canvas")();
                          var __unused = function (dictPartial1) {
                              return function ($dollar48) {
                                  return $dollar48;
                              };
                          };
                          return __unused(dictPartial)((function () {
                              if (v2 instanceof Data_Maybe.Just) {
                                  return function __do() {
                                      var v3 = Graphics_Canvas.getContext2D(v2.value0)();
                                      var v4 = Graphics_Canvas.clearRect(v3)({
                                          x: -200.0,
                                          y: -200.0,
                                          w: state1.size,
                                          h: state1.size
                                      })();
                                      return update_canv(v3)(state1)();
                                  };
                              };
                              throw new Error("Failed pattern match at Cube.Shape line 271, column 5 - line 272, column 5: " + [ v2.constructor.name ]);
                          })())();
                      };
                  })();
              };
          };
      };
  };
  var animate_cube = function (dictPartial) {
      return function (state) {
          return function (context) {
              return function (draw) {
                  return animate(dictPartial)(state)(function (state1) {
                      return function (context1) {
                          return function __do() {
                              update_canvas(dictPartial)(context1)(state1)();
                              return draw(context1)(state1)();
                          };
                      };
                  });
              };
          };
      };
  };
  var main = Data_Functor["void"](Control_Monad_Eff.functorEff)(function __do() {
      var v = Graphics_Canvas.getCanvasElementById("canvas")();
      var __unused = function (dictPartial1) {
          return function ($dollar53) {
              return $dollar53;
          };
      };
      return __unused()((function () {
          if (v instanceof Data_Maybe.Just) {
              return function __do() {
                  var v1 = Graphics_Canvas.getContext2D(v.value0)();
                  var v2 = Graphics_Canvas.setCanvasHeight(520.0)(v.value0)();
                  var v3 = Graphics_Canvas.setCanvasWidth(520.0)(v.value0)();
                  var v4 = Graphics_Canvas.translate({
                      translateX: 200.0,
                      translateY: 200.0
                  })(v1)();
                  var nodes_array = [ [ -100.0, -100.0, -100.0 ], [ -100.0, -100.0, 100.0 ], [ -100.0, 100.0, -100.0 ], [ -100.0, 100.0, 100.0 ], [ 100.0, -100.0, -100.0 ], [ 100.0, -100.0, 100.0 ], [ 100.0, 100.0, -100.0 ], [ 100.0, 100.0, 100.0 ] ];
                  var edges_array = [ [ 0, 1 ], [ 1, 3 ], [ 3, 2 ], [ 2, 0 ], [ 4, 5 ], [ 5, 7 ], [ 7, 6 ], [ 6, 4 ], [ 0, 4 ], [ 1, 5 ], [ 2, 6 ], [ 3, 7 ] ];
                  var v5 = Data_Array_ST.emptySTArray();
                  Data_Functor["void"](Control_Monad_Eff.functorEff)(Control_Monad_Eff.forE(0)(8)(function (n) {
                      var xx = Data_Array.index(nodes_array)(n);
                      var yy = Data_Maybe.fromMaybe([  ])(xx);
                      return Data_Functor["void"](Control_Monad_Eff.functorEff)(Data_Array_ST.pushSTArray(v5)(yy));
                  }))();
                  var v6 = Data_Array_ST.emptySTArray();
                  Data_Functor["void"](Control_Monad_Eff.functorEff)(Control_Monad_Eff.forE(0)(12)(function (e) {
                      var je = Data_Array.index(edges_array)(e);
                      var e1 = Data_Maybe.fromMaybe([  ])(je);
                      return Data_Functor["void"](Control_Monad_Eff.functorEff)(Data_Array_ST.pushSTArray(v6)(e1));
                  }))();
                  var state = {
                      n: v5,
                      e: v6,
                      x_theta: $$Math.pi / 4.0,
                      y_theta: $$Math.pi / 3.0,
                      z_theta: $$Math.pi / 4.0,
                      size: 520.0
                  };
                  return Data_Functor["void"](Control_Monad_Eff.functorEff)(animate_cube()(state)(v1)(function (state1) {
                      return function (context1) {
                          return function __do() {
                              Data_Functor["void"](Control_Monad_Eff.functorEff)(rotate_cube(context1)(state1))();
                              var $89 = {};
                              for (var $90 in state1) {
                                  if ({}.hasOwnProperty.call(state1, $90)) {
                                      $89[$90] = state1[$90];
                                  };
                              };
                              $89.n = v5;
                              $89.e = v6;
                              $89.x_theta = state1.x_theta + 4.3e-2;
                              $89.y_theta = state1.y_theta + 4.3e-2;
                              $89.z_theta = state1.z_theta + 4.3e-2;
                              $89.size = state1.size;
                              return $89;
                          };
                      };
                  }))();
              };
          };
          throw new Error("Failed pattern match at Cube.Shape line 361, column 3 - line 362, column 3: " + [ v.constructor.name ]);
      })())();
  });
  exports["rotate_z"] = rotate_z;
  exports["rotate_y"] = rotate_y;
  exports["rotate_x"] = rotate_x;
  exports["rotate_cube"] = rotate_cube;
  exports["draw_line"] = draw_line;
  exports["draw_faces"] = draw_faces;
  exports["draw_cube"] = draw_cube;
  exports["animation"] = animation;
  exports["animate"] = animate;
  exports["update_canvas"] = update_canvas;
  exports["animate_cube"] = animate_cube;
  exports["main"] = main;
})(PS["Cube.Shape"] = PS["Cube.Shape"] || {});
PS["Cube.Shape"].main();
